

---
APP.PY PROGRESS
## 🔹 1. **Upload & Preview CSV**

```python
uploaded_file = st.file_uploader("Upload a CSV file", type=["csv"])

if uploaded_file is not None:
    data = pd.read_csv(uploaded_file)
    st.subheader("Dataset Overview")
    st.write(data.head())
```

### ✅ What it does:
- Allows the user to upload a `.csv` file.
- If a file is uploaded, it reads it using `pandas`.
- Shows the **first few rows** of the dataset so the user can confirm it looks right.

---

## 🔹 2. **Dataset Info: Rows, Columns**

```python
    st.write(f"Number of Rows: {data.shape[0]}")
    st.write(f"Number of Columns: {data.shape[1]}")
```

### ✅ What it does:
- Displays the total **number of rows and columns** in the uploaded dataset.

---

## 🔹 3. **Class Distribution Chart (Legit vs Fraud)**

```python
    st.subheader("Class Distribution (Legit vs Fraud)")
    fig, ax = plt.subplots()
    sns.countplot(x='Class', data=data, ax=ax, palette='Set2')
    ax.set_xticklabels(['Legit', 'Fraud'])
    st.pyplot(fig)
```

### ✅ What it does:
- Visualizes how many transactions are **legit (0)** and **fraud (1)** using a bar chart.
- Helps you see how imbalanced the dataset is — which is why we use techniques like SMOTE.

---

## 🔹 4. **Amount Distribution by Class**

```python
    st.subheader("Amount Distribution by Class")
    fig2, ax2 = plt.subplots()
    sns.boxplot(x='Class', y='Amount', data=data, ax=ax2, palette='Set2')
    ax2.set_xticklabels(['Legit', 'Fraud'])
    st.pyplot(fig2)
```

### ✅ What it does:
- Uses a **boxplot** to show the **range and median of transaction amounts** for legit vs fraud.
- You can often see frauds have **different spending patterns**.

---

## 🔹 5. **Preprocessing (Scaling + Drop Time)**

```python
    data_for_pred = data.copy()

    if 'Amount' in data_for_pred.columns:
        sc = StandardScaler()
        data_for_pred['Amount'] = sc.fit_transform(pd.DataFrame(data_for_pred['Amount']))
    if 'Time' in data_for_pred.columns:
        data_for_pred = data_for_pred.drop('Time', axis=1)
```

### ✅ What it does:
- Makes a copy of the dataset to **avoid modifying the original**.
- **Scales the `Amount` column** (very important for models that care about value ranges).
- **Drops the `Time` column**, which isn't usually useful for prediction.

---

## 🔹 6. **Prepare Features and Labels**

```python
    X = data_for_pred.drop('Class', axis=1)
    y = data_for_pred['Class']
```

### ✅ What it does:
- Splits the data into:
  - `X`: All columns **except `Class`** (features for prediction).
  - `y`: The **`Class` column** (target: legit or fraud).

---

## 🔹 7. **Predict Using the Pretrained Model**

```python
    prediction = model.predict(X)
```

### ✅ What it does:
- Uses your **loaded machine learning model** to predict whether each row is fraud or not.

---

## 🔹 8. **Display Detected Fraud Transactions**

```python
    fraud_data = data[prediction == 1]
    st.subheader("✅ Detected Fraud Transactions")
    st.write(fraud_data)

    st.subheader("💰 Fraud Transaction Amounts")
    st.write(fraud_data['Amount'])
```

### ✅ What it does:
- Filters the **original uploaded data** to only include rows where the model predicted **fraud (1)**.
- Shows a **table of those fraudulent transactions** and their amounts.

---

## 🔹 9. **Download Button for Fraud Data**

```python
    csv = fraud_data.to_csv(index=False)
    st.download_button("⬇️ Download Fraud Transactions", data=csv, file_name="fraud_transactions.csv", mime="text/csv")
```

### ✅ What it does:
- Converts the fraud data into a `.csv` string.
- Adds a **button** for users to **download all predicted frauds**.

---

## 🔹 10. **Visualize SMOTE-Resampled Data (Training Insight Only)**

```python
    st.subheader("📈 Class Distribution After SMOTE (for training purposes)")

    X_res, y_res = SMOTE().fit_resample(X, y)
    smote_df = pd.DataFrame(X_res, columns=X.columns)
    smote_df['Class'] = y_res

    fig3, ax3 = plt.subplots()
    sns.countplot(x='Class', data=smote_df, ax=ax3, palette='coolwarm')
    ax3.set_xticklabels(['Legit', 'Fraud'])
    st.pyplot(fig3)

    st.info("This SMOTE-balanced class distribution is only for visualization/training, not used for prediction.")
```

### ✅ What it does:
- Applies **SMOTE** to create a **balanced dataset** (same number of fraud and legit samples).
- Shows a chart of this new class distribution — useful for training/education.
- Makes it **very clear this is not used for prediction**, only for learning/visualization.

---

### ✅ Summary: Clean Design Flow
| Section                     | Purpose                                     |
|----------------------------|---------------------------------------------|
| File upload                | Get data from user                          |
| Data preview               | Help user verify dataset                    |
| Charts                     | Visualize class and amount distribution     |
| Preprocessing              | Normalize data and drop unnecessary columns |
| Model prediction           | Detect fraud in uploaded transactions       |
| Output + Download          | Show frauds and let user download results   |
| SMOTE Visualization        | Show balanced data for education/training   |

---


